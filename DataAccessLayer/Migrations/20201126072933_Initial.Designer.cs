// <auto-generated />
using System;
using DataAccessLayer.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(TrackerDbContext))]
    [Migration("20201126072933_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BusinessObjects.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Addressline")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("HospitalID")
                        .HasColumnType("int");

                    b.Property<int?>("OccupationID")
                        .HasColumnType("int");

                    b.Property<int>("StateID")
                        .HasColumnType("int");

                    b.Property<string>("UniqueID")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.HasIndex("HospitalID")
                        .IsUnique()
                        .HasFilter("[HospitalID] IS NOT NULL");

                    b.HasIndex("OccupationID")
                        .IsUnique()
                        .HasFilter("[OccupationID] IS NOT NULL");

                    b.HasIndex("StateID");

                    b.HasIndex("UniqueID");

                    b.ToTable("tbl_Address");
                });

            modelBuilder.Entity("BusinessObjects.DiseaseTypes", b =>
                {
                    b.Property<int>("DiseaseTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiseaseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("DiseaseTypeID");

                    b.HasIndex("DiseaseType")
                        .IsUnique();

                    b.ToTable("tbl_DiseaseTypes");
                });

            modelBuilder.Entity("BusinessObjects.HospitalDetails", b =>
                {
                    b.Property<int>("HospitalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("HospitalID");

                    b.ToTable("tbl_HospitalDetails");
                });

            modelBuilder.Entity("BusinessObjects.OccupationDetails", b =>
                {
                    b.Property<int>("OccupationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("OccupationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("OccupationID");

                    b.HasIndex("UniqueID")
                        .IsUnique();

                    b.ToTable("tbl_OccupationDetails");
                });

            modelBuilder.Entity("BusinessObjects.PatientDetails", b =>
                {
                    b.Property<string>("UniqueID")
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("Age")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UniqueID");

                    b.ToTable("tbl_PatientDetails");
                });

            modelBuilder.Entity("BusinessObjects.StateNames", b =>
                {
                    b.Property<int>("StateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("StateID");

                    b.HasIndex("State")
                        .IsUnique();

                    b.ToTable("tbl_StateNames");
                });

            modelBuilder.Entity("BusinessObjects.TreatmentDetails", b =>
                {
                    b.Property<int>("TreatmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdmitDate")
                        .HasColumnType("Date");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("DischargeDate")
                        .HasColumnType("Date");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("DiseaseTypeID")
                        .HasColumnType("int");

                    b.Property<int>("HospitalID")
                        .HasColumnType("int");

                    b.Property<string>("IsFatality")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Prescription")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UniqueID")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TreatmentID");

                    b.HasIndex("DiseaseTypeID");

                    b.HasIndex("HospitalID");

                    b.HasIndex("UniqueID");

                    b.ToTable("tbl_TreatmentDetails");
                });

            modelBuilder.Entity("BusinessObjects.Address", b =>
                {
                    b.HasOne("BusinessObjects.HospitalDetails", "HospitalAddress")
                        .WithOne("Address")
                        .HasForeignKey("BusinessObjects.Address", "HospitalID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BusinessObjects.OccupationDetails", "OccupationAddress")
                        .WithOne("Address")
                        .HasForeignKey("BusinessObjects.Address", "OccupationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BusinessObjects.StateNames", "StateName")
                        .WithMany("Address")
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.PatientDetails", "PatientAddress")
                        .WithMany("Address")
                        .HasForeignKey("UniqueID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BusinessObjects.OccupationDetails", b =>
                {
                    b.HasOne("BusinessObjects.PatientDetails", "Patient")
                        .WithOne("OccupationDetails")
                        .HasForeignKey("BusinessObjects.OccupationDetails", "UniqueID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObjects.TreatmentDetails", b =>
                {
                    b.HasOne("BusinessObjects.DiseaseTypes", "DiseaseType")
                        .WithMany("TreatmentDetails")
                        .HasForeignKey("DiseaseTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.HospitalDetails", "Hospital")
                        .WithMany("TreatmentDetails")
                        .HasForeignKey("HospitalID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObjects.PatientDetails", "Patient")
                        .WithMany("TreatmentDetails")
                        .HasForeignKey("UniqueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
